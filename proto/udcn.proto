syntax = "proto3";

package udcn;

// Main service for communication between the Python control plane and Rust transport layer
service UdcnControl {
  // Update MTU based on ML prediction
  rpc UpdateMtu(MtuRequest) returns (MtuResponse);

  // Register a new prefix for forwarding or production
  rpc RegisterPrefix(PrefixRegistrationRequest) returns (PrefixRegistrationResponse);

  // Unregister a previously registered prefix
  rpc UnregisterPrefix(PrefixUnregistrationRequest) returns (PrefixUnregistrationResponse);

  // Get transport statistics and metrics
  rpc GetMetrics(MetricsRequest) returns (MetricsResponse);
  
  // Collect network interface information
  rpc GetNetworkInterfaces(NetworkInterfacesRequest) returns (NetworkInterfacesResponse);
  
  // Control the state of the transport (start/stop/restart)
  rpc ControlTransport(TransportControlRequest) returns (TransportControlResponse);
  
  // Streaming metrics for real-time monitoring
  rpc StreamMetrics(StreamMetricsRequest) returns (stream MetricsData);
  
  // Configure the transport layer parameters
  rpc ConfigureTransport(TransportConfigRequest) returns (TransportConfigResponse);
  
  // Get the current state of the transport layer
  rpc GetTransportState(TransportStateRequest) returns (TransportStateResponse);
}

// MTU-related messages
message MtuRequest {
  uint32 mtu = 1;
  string interface_name = 2;
  float confidence = 3;
  map<string, string> metadata = 4;
}

message MtuResponse {
  bool success = 1;
  string error_message = 2;
  uint32 previous_mtu = 3;
  uint32 current_mtu = 4;
}

// Prefix registration messages
message PrefixRegistrationRequest {
  string prefix = 1;
  PrefixType type = 2;
  uint32 priority = 3;
  map<string, string> flags = 4;
  
  enum PrefixType {
    PRODUCER = 0;
    FORWARDER = 1;
  }
}

message PrefixRegistrationResponse {
  bool success = 1;
  string error_message = 2;
  uint64 registration_id = 3;
}

// Prefix unregistration messages
message PrefixUnregistrationRequest {
  uint64 registration_id = 1;
  string prefix = 2;
}

message PrefixUnregistrationResponse {
  bool success = 1;
  string error_message = 2;
}

// Metrics-related messages
message MetricsRequest {
  repeated string metric_names = 1;
  uint64 since_timestamp = 2;
}

message MetricsResponse {
  bool success = 1;
  string error_message = 2;
  map<string, MetricValue> metrics = 3;
}

message MetricValue {
  oneof value {
    uint64 counter_value = 1;
    double gauge_value = 2;
    Histogram histogram_value = 3;
  }
  uint64 timestamp = 4;
}

message Histogram {
  repeated uint64 buckets = 1;
  repeated uint64 counts = 2;
  double sum = 3;
  uint64 count = 4;
}

// Network interface messages
message NetworkInterfacesRequest {
  bool include_stats = 1;
}

message NetworkInterfacesResponse {
  bool success = 1;
  string error_message = 2;
  repeated NetworkInterface interfaces = 3;
}

message NetworkInterface {
  string name = 1;
  string mac_address = 2;
  repeated string ip_addresses = 3;
  uint32 mtu = 4;
  bool is_up = 5;
  uint64 rx_bytes = 6;
  uint64 tx_bytes = 7;
  uint64 rx_packets = 8;
  uint64 tx_packets = 9;
  uint64 rx_errors = 10;
  uint64 tx_errors = 11;
  uint64 tx_dropped = 12;
  uint64 rx_dropped = 13;
}

// Transport control messages
message TransportControlRequest {
  ControlAction action = 1;
  map<string, string> parameters = 2;
  
  enum ControlAction {
    START = 0;
    STOP = 1;
    RESTART = 2;
    PAUSE = 3;
    RESUME = 4;
  }
}

message TransportControlResponse {
  bool success = 1;
  string error_message = 2;
  TransportState current_state = 3;
  
  enum TransportState {
    RUNNING = 0;
    STOPPED = 1;
    PAUSED = 2;
    ERROR = 3;
    STARTING = 4;
    STOPPING = 5;
  }
}

// Streaming metrics messages
message StreamMetricsRequest {
  repeated string metric_names = 1;
  uint32 interval_ms = 2;
  uint32 max_samples = 3;
}

message MetricsData {
  uint64 timestamp = 1;
  map<string, MetricValue> metrics = 2;
}

// Transport configuration messages
message TransportConfigRequest {
  uint32 cache_capacity = 1;
  uint32 idle_timeout = 2;
  bool enable_metrics = 3;
  uint32 metrics_port = 4;
  string bind_address = 5;
  map<string, string> advanced_config = 6;
}

message TransportConfigResponse {
  bool success = 1;
  string error_message = 2;
  TransportConfig current_config = 3;
}

message TransportConfig {
  uint32 mtu = 1;
  uint32 cache_capacity = 2;
  uint32 idle_timeout = 3;
  bool enable_metrics = 4;
  uint32 metrics_port = 5;
  string bind_address = 6;
  map<string, string> advanced_config = 7;
}

// Transport state messages
message TransportStateRequest {
  bool include_detailed_stats = 1;
}

message TransportStateResponse {
  bool success = 1;
  string error_message = 2;
  TransportControlResponse.TransportState state = 3;
  uint32 uptime_seconds = 4;
  uint64 interests_processed = 5;
  uint64 data_packets_sent = 6;
  uint64 cache_hits = 7;
  uint64 cache_misses = 8;
  double cache_hit_ratio = 9;
  map<string, string> detailed_stats = 10;
}
